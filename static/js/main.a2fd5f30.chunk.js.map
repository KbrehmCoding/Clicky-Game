{"version":3,"sources":["components/Nav/Nav.js","components/CharacterCard/CharacterCard.js","components/Game/Game.js","components/Jumbo/Jumbo.js","App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","lib","className","right","fixed","concat","this","props","scoreText","value","highScoreText","value2","Component","CharacterCard","_this","onClick","handleClick","id","alt","image","split","src","Game","state","characters","shuffleCharacters","newCharacters","slice","i","length","k","Math","floor","random","temp","setState","onCharacterClick","_this2","map","character","components_CharacterCard_CharacterCard","name","key","shuffle","Jumbo","App","clickedList","highScore","score","includes","Object","toConsumableArray","components_Nav_Nav","components_Jumbo_Jumbo","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2fd5f30.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Nav.css';\nimport { Navbar } from 'react-materialize';\n\nclass Nav extends Component {\n    render() {\n        return (\n            <Navbar className=\"Navbar\" right fixed>\n                <ul>\n                    <li className=\"li\">Clicky Game</li>\n                    <li className=\"li\">Click an image to begin!</li>\n                    <li className=\"Score\">{`${this.props.scoreText} ${this.props.value}`}</li>\n                    <li className=\"HighScore\">{`${this.props.highScoreText} ${this.props.value2}`}</li>\n                </ul>\n            </Navbar>\n        );\n    }\n}\n\nexport default Nav;\n","import React, { Component } from 'react';\nimport { Card } from 'react-materialize';\nimport './CharacterCard.css';\n\nclass CharacterCard extends Component {\n    render() {\n        return (\n            <Card onClick={() => this.props.handleClick(this.props.id)}>\n                <div className=\"imageContainer\">\n                    <img alt={this.props.image.split('.')[0]} src={this.props.image} />\n                </div>\n            </Card>\n        );\n    }\n}\n\nexport default CharacterCard;\n","import React, { Component } from 'react';\nimport './Game.css';\nimport CharacterCard from '../CharacterCard/CharacterCard';\nimport characters from '../../cards.json';\n\nclass Game extends Component {\n    state = {\n        characters,\n    };\n\n    shuffleCharacters = () => {\n        let newCharacters = this.state.characters.slice(0);\n        for (let i = newCharacters.length - 1; i > 0; i--) {\n            const k = Math.floor(Math.random() * (i + 1));\n            const temp = newCharacters[i];\n            newCharacters[i] = newCharacters[k];\n            newCharacters[k] = temp;\n        }\n        this.setState({ characters: newCharacters });\n    };\n\n    handleClick = id => {\n        this.props.onCharacterClick(id);\n        this.shuffleCharacters();\n    };\n\n    render() {\n        return (\n            <div className=\"gameContainer\">\n                { this.state.characters.map(character => (\n                    <CharacterCard\n                        name={character.name}\n                        image={character.image}\n                        key={character.id}\n                        id={character.id}\n                        handleClick={this.handleClick}\n                        shuffle={this.shuffle}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './Jumbo.css';\n\nclass Jumbo extends Component {\n    render() {\n        return (\n            <div className=\"Jumbotron\">\n                <br /><br />\n                <h1>Clicky Game!</h1>\n                <div><h4>Click on an image to earn points, but don't click on any more than once!</h4></div>\n            </div>\n        );\n    }\n}\n\nexport default Jumbo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './components/Nav/Nav';\nimport Game from './components/Game/Game'\nimport Jumbo from './components/Jumbo/Jumbo'\n\nclass App extends Component {\n  state = {\n    clickedList: [],\n    highScore: 0,\n    score: 0,\n  };\n\n  onCharacterClick = id => {\n    const { clickedList } = this.state;\n\n    if (clickedList.includes(id)) {\n        this.setState({\n            clickedList: [],\n            highScore: this.state.score > this.state.highScore ? this.state.score : this.state.highScore,\n            score: 0,\n        });\n    } else {\n        this.setState({\n            clickedList: [...clickedList, id],\n            score: this.state.score + 1,\n        });\n    }\n}\n\n  render() {\n    return (\n      <div className=\"appContainer\">\n          <Nav\n            scoreText=\"Score: \"\n            value={this.state.score}\n            highScoreText=\"HighScore: \"\n            value2={this.state.highScore}\n          />\n          <Jumbo />\n          <Game onCharacterClick={this.onCharacterClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}